import * as React from "react";
import {
  Bot,
  MessageSquare,
  Plus,
  Send,
  Settings,
  Trash2,
  User,
  MoreHorizontal,
  Edit3,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { useMutation } from "@tanstack/react-query";
import { trpc } from "@/utils/trpc";

interface Message {
  id: string;
  content: string;
  role: "user" | "assistant";
  timestamp: Date;
}

interface Chat {
  id: string;
  title: string;
  messages: Message[];
  lastMessage: Date;
}

// Mock API functions (replace with actual API calls later)
const mockAPI = {
  async getChats(): Promise<Chat[]> {
    return new Promise((resolve) => {
      setTimeout(() => {
        const savedChats = localStorage.getItem("ai-chats");
        if (savedChats) {
          const parsedChats = JSON.parse(savedChats);
          // Convert timestamp strings back to Date objects
          const chatsWithDates = parsedChats.map((chat: any) => ({
            ...chat,
            lastMessage: new Date(chat.lastMessage),
            messages: chat.messages.map((msg: any) => ({
              ...msg,
              timestamp: new Date(msg.timestamp),
            })),
          }));
          resolve(chatsWithDates);
        } else {
          resolve([]);
        }
      }, 100);
    });
  },

  // Simulate creating a new chat
  async createChat(): Promise<Chat> {
    return new Promise((resolve) => {
      setTimeout(() => {
        const newChat: Chat = {
          id: Date.now().toString(),
          title: "New Chat",
          messages: [],
          lastMessage: new Date(),
        };
        resolve(newChat);
      }, 100);
    });
  },

  // Simulate sending a message to AI
  async sendMessage(message: string, chatHistory: Message[]): Promise<string> {
    return new Promise((resolve, reject) => {
      setTimeout(
        () => {
          try {
            // Simulate AI response based on the message
            const responses = [
              `I understand you're asking about "${message.slice(0, 50)}...". Let me help you with that.`,
              `That's an interesting question about "${message.slice(0, 30)}...". Here's what I think:`,
              `Based on your question about "${message.slice(0, 40)}...", I can provide some insights.`,
              `Let me break down your question about "${message.slice(0, 35)}..." step by step.`,
              `Thank you for asking about "${message.slice(0, 45)}...". Here's my perspective:`,
            ];

            const randomResponse =
              responses[Math.floor(Math.random() * responses.length)];
            const contextualResponse = `${randomResponse}\n\nThis is a simulated AI response. In a real implementation, this would be generated by an AI model based on your message and the conversation context.`;

            resolve(contextualResponse);
          } catch (error) {
            reject(new Error("Failed to get AI response"));
          }
        },
        1000 + Math.random() * 2000
      );
    });
  },

  // Simulate deleting a chat
  async deleteChat(chatId: string): Promise<void> {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, 100);
    });
  },

  // Simulate updating chat title
  async updateChatTitle(chatId: string, title: string): Promise<void> {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, 100);
    });
  },
};

export function ChatInterface() {
  const [chats, setChats] = React.useState<Chat[]>([]);
  const [activeChat, setActiveChat] = React.useState<string>("");
  const [input, setInput] = React.useState("");
  const [isTyping, setIsTyping] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);
  const messagesEndRef = React.useRef<HTMLDivElement>(null);
  const promptMutation = useMutation(trpc.prompt.mutationOptions());

  const currentChat = chats.find((chat) => chat.id === activeChat);

  // Save chats to localStorage whenever chats state changes
  React.useEffect(() => {
    if (!isLoading) {
      localStorage.setItem("ai-chats", JSON.stringify(chats));
    }
  }, [chats, isLoading]);

  React.useEffect(() => {
    const loadChats = async () => {
      try {
        setIsLoading(true);
        const loadedChats = await mockAPI.getChats();
        setChats(loadedChats);
        if (loadedChats.length > 0) {
          setActiveChat(loadedChats[0].id);
        }
      } catch (err) {
        setError("Failed to load chats");
        console.error("Error loading chats:", err);
      } finally {
        setIsLoading(false);
      }
    };

    loadChats();
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  React.useEffect(() => {
    scrollToBottom();
  }, [currentChat?.messages]);

  const createNewChat = async () => {
    try {
      const newChat = await mockAPI.createChat();
      setChats((prev) => [newChat, ...prev]);
      setActiveChat(newChat.id);
      setError(null);
    } catch (err) {
      setError("Failed to create new chat");
      console.error("Error creating chat:", err);
    }
  };

  const deleteChat = async (chatId: string) => {
    try {
      await mockAPI.deleteChat(chatId);
      setChats((prev) => prev.filter((chat) => chat.id !== chatId));

      if (activeChat === chatId) {
        const remainingChats = chats.filter((chat) => chat.id !== chatId);
        setActiveChat(remainingChats[0]?.id || "");
      }
      setError(null);
    } catch (err) {
      setError("Failed to delete chat");
      console.error("Error deleting chat:", err);
    }
  };

  const sendMessage = async () => {
    if (!input.trim() || !activeChat || isTyping || promptMutation.isPending)
      return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input.trim(),
      role: "user",
      timestamp: new Date(),
    };

    const messageContent = input.trim();
    setInput("");

    // Update chat with user message
    setChats((prev) =>
      prev.map((chat) =>
        chat.id === activeChat
          ? {
              ...chat,
              messages: [...chat.messages, userMessage],
              title:
                chat.messages.length === 0
                  ? messageContent.slice(0, 30) +
                    (messageContent.length > 30 ? "..." : "")
                  : chat.title,
              lastMessage: new Date(),
            }
          : chat
      )
    );

    setIsTyping(true);
    setError(null);

    try {
      const response = await promptMutation.mutateAsync({
        message: messageContent,
      });

      if (response.ok && "text" in response) {
        const aiMessage: Message = {
          id: (Date.now() + 1).toString(),
          content:
            response.text.value?.text ||
            "I apologize, but I couldn't generate a response.",
          role: "assistant",
          timestamp: new Date(),
        };

        setChats((prev) =>
          prev.map((chat) =>
            chat.id === activeChat
              ? {
                  ...chat,
                  messages: [...chat.messages, aiMessage],
                  lastMessage: new Date(),
                }
              : chat
          )
        );
      } else {
        setError("Failed to get AI response");
      }
    } catch (err) {
      setError("Failed to get AI response");
      console.error("Error getting AI response:", err);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="flex items-center gap-2">
          <Bot className="h-6 w-6 animate-spin" />
          <span>Loading chats...</span>
        </div>
      </div>
    );
  }

  return (
    <SidebarProvider>
      <Sidebar className="border-r">
        <SidebarHeader>
          <div className="flex items-center gap-2 px-2 py-2">
            <Bot className="h-6 w-6" />
            <span className="font-semibold">AI Chat</span>
          </div>
          <Button
            onClick={createNewChat}
            className="mx-2 justify-start gap-2"
            variant="outline"
          >
            <Plus className="h-4 w-4" />
            New Chat
          </Button>
        </SidebarHeader>

        <SidebarContent>
          <SidebarGroup>
            <SidebarGroupLabel>Recent Chats</SidebarGroupLabel>
            <SidebarGroupContent>
              <SidebarMenu>
                {chats.length === 0 ? (
                  <div className="px-2 py-4 text-sm text-muted-foreground text-center">
                    No chats yet. Start a new conversation!
                  </div>
                ) : (
                  chats.map((chat) => (
                    <SidebarMenuItem key={chat.id}>
                      <SidebarMenuButton
                        asChild
                        isActive={activeChat === chat.id}
                        className="group"
                      >
                        <button
                          onClick={() => setActiveChat(chat.id)}
                          className="flex items-center gap-2 w-full text-left"
                        >
                          <MessageSquare className="h-4 w-4 shrink-0" />
                          <span className="truncate">{chat.title}</span>
                        </button>
                      </SidebarMenuButton>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <SidebarMenuAction>
                            <MoreHorizontal className="h-4 w-4" />
                          </SidebarMenuAction>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent side="right" align="start">
                          <DropdownMenuItem>
                            <Edit3 className="h-4 w-4 mr-2" />
                            Rename
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => deleteChat(chat.id)}
                            className="text-red-600"
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </SidebarMenuItem>
                  ))
                )}
              </SidebarMenu>
            </SidebarGroupContent>
          </SidebarGroup>
        </SidebarContent>

        <SidebarFooter>
          <SidebarMenu>
            <SidebarMenuItem>
              <SidebarMenuButton asChild>
                <button className="flex items-center gap-2">
                  <Settings className="h-4 w-4" />
                  Settings
                </button>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarFooter>
      </Sidebar>

      <SidebarInset className="flex flex-col">
        <header className="flex h-14 items-center gap-2 border-b px-4">
          <SidebarTrigger />
          <div className="flex items-center gap-2">
            <Bot className="h-5 w-5" />
            <span className="font-medium">
              {currentChat?.title || "Select a chat"}
            </span>
          </div>
        </header>

        {error && (
          <div className="bg-red-50 border-l-4 border-red-400 p-4 mx-4 mt-4">
            <div className="flex">
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        )}

        <ScrollArea className="flex-1 p-4">
          <div className="space-y-4 max-w-3xl mx-auto">
            {!currentChat ? (
              <div className="flex flex-col items-center justify-center h-full text-center py-12">
                <Bot className="h-12 w-12 text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Welcome to AI Chat</h3>
                <p className="text-muted-foreground mb-4">
                  Start a new conversation or select an existing chat from the
                  sidebar.
                </p>
                <Button onClick={createNewChat} className="gap-2">
                  <Plus className="h-4 w-4" />
                  Start New Chat
                </Button>
              </div>
            ) : (
              <>
                {currentChat.messages.length === 0 && (
                  <div className="flex flex-col items-center justify-center py-12 text-center">
                    <Bot className="h-8 w-8 text-muted-foreground mb-3" />
                    <p className="text-muted-foreground">
                      Start the conversation by typing a message below.
                    </p>
                  </div>
                )}

                {currentChat.messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
                  >
                    {message.role === "assistant" && (
                      <Avatar className="h-8 w-8 shrink-0">
                        <AvatarFallback>
                          <Bot className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                    )}

                    <div
                      className={`rounded-lg px-4 py-2 max-w-[80%] ${
                        message.role === "user"
                          ? "bg-primary text-primary-foreground ml-12"
                          : "bg-muted"
                      }`}
                    >
                      <div className="whitespace-pre-wrap text-sm">
                        {message.content}
                      </div>
                      <div className="text-xs opacity-70 mt-1">
                        {message.timestamp.toLocaleTimeString([], {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </div>
                    </div>

                    {message.role === "user" && (
                      <Avatar className="h-8 w-8 shrink-0">
                        <AvatarFallback>
                          <User className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                    )}
                  </div>
                ))}

                {(isTyping || promptMutation.isPending) && (
                  <div className="flex gap-3 justify-start">
                    <Avatar className="h-8 w-8 shrink-0">
                      <AvatarFallback>
                        <Bot className="h-4 w-4" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="bg-muted rounded-lg px-4 py-2">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                        <div
                          className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </>
            )}
          </div>
        </ScrollArea>

        <div className="border-t p-4">
          <div className="flex gap-2 max-w-3xl mx-auto">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={
                activeChat
                  ? "Type your message..."
                  : "Create a new chat to start messaging"
              }
              className="flex-1"
              disabled={!activeChat || isTyping || promptMutation.isPending}
            />
            <Button
              onClick={sendMessage}
              disabled={
                !input.trim() ||
                !activeChat ||
                isTyping ||
                promptMutation.isPending
              }
              size="icon"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}
